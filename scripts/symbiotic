#!/usr/bin/env python
#
#  -- Symbiotic tool --
#      2015 - 2019
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.

import sys
import os
from time import time

# set path to our package
pth = os.path.join(os.path.dirname(__file__), '../lib/symbioticpy')
sys.path.append(os.path.abspath(pth))

from symbiotic.utils import err, dbg
from symbiotic.utils.utils import print_stdout, print_stderr, get_symbiotic_dir
from symbiotic.utils.timeout import Timeout, start_timeout, stop_timeout
from symbiotic import SymbioticException, Symbiotic
from symbiotic.verifier import initialize_verifier
from symbiotic.environment import Environment
from symbiotic.options import parse_command_line
from symbiotic.options import usage_msg, print_short_vers, get_versions

def dump_paths(dump_as_cmd=False, fun = print_stdout):
    variables = ['PATH', 'LD_LIBRARY_PATH', 'C_INCLUDE_DIR']
    for v in variables:
        if v in os.environ:
            if dump_as_cmd:
                fun('export {0}={1}:${0}'.format(v, os.environ[v]))
            else:
                fun('{0}={1}'.format(v, os.environ[v]))

    variables = ['CFLAGS', 'CPPFLAGS']
    for v in variables:
        if v in os.environ:
            if dump_as_cmd:
                fun('export {0}="{1} ${0}"'.format(v, os.environ[v]))
            else:
                fun('{0}="{1}"'.format(v, os.environ[v]))

def perform_binaries_check(additional):
    try:
        from benchexec.util import find_executable
    except ImportError:
        from symbiotic.benchexec.util import find_executable

    executables = ['clang', 'opt', 'llvm-link', 'llvm-nm',
                   'sbt-instr'] + additional
    for exe in executables:
        exe_path = find_executable(exe)
        if not os.path.isfile(exe_path):
            err("Cannot find executable '{0}' ('{1}')".format(exe, exe_path))
        else:
            dbg("'{0}' is '{1}'".format(os.path.basename(exe), exe_path))

def _find_library(lib):
    # code taken and modified from benchexec.util.find_executable
    dirs = os.environ['LD_LIBRARY_PATH'].split(os.path.pathsep)

    for dir_ in dirs:
        name = os.path.join(dir_, lib)
        if os.path.isfile(name):
            return name

    return None

def perform_libraries_check():
    libraries = ['LLVMsbt.so', 'libCheckNSWPlugin.so',
                 'libPointsToPlugin.so', 'libRA.so',
                 'libLLVMdg.so', 'libLLVMpta.so', 'libLLVMrd.so',
                 'libPTA.so', 'libRD.so']
    for lib in libraries:
        if not _find_library(lib):
            err("Cannot find library '{0}'".format(lib))

def on_rm_error(func, pth, exc):
    print_stderr('Failed removing tmp dir: {0})'.format(str(exc[1])), color='RED')

def rm_tmp_dir(d):
    from shutil import rmtree
    rmtree(d, onerror=on_rm_error)

def setup_working_directory(opts):
    """
    Create temporary directory, either in the current folder or on tmp.
    Return the path to that directory.
    """

    from tempfile import mkdtemp
    from shutil import copy

    if opts.save_files:
        tmpdir = 'symbiotic_files'
        try:
            os.mkdir(tmpdir)
        except OSError:
            rm_tmp_dir(tmpdir)
            os.mkdir(tmpdir)
    else:
        if os.path.isdir(opts.working_dir_prefix):
            prefix = os.path.join(opts.working_dir_prefix, 'symbiotic-')
        else:
            dbg('Found no {0} dir, falling-back to curdir: {1}'.format(opts.working_dir_prefix, os.getcwd()))
            prefix = 'symbiotic-'

        tmpdir = mkdtemp(prefix=prefix, dir='.')

    return tmpdir

def report_results(res):
    """
    Report result to the user and terminate analysis
    """
    dbg(res)
    color = 'BROWN'

    if res.startswith('false'):
        color = 'RED'
        print_stdout('Error found.', color=color)
    elif res == 'true':
        color = 'GREEN'
        print_stdout('No error found.', color=color)
    elif res.startswith('error') or\
            res.startswith('ERROR'):
        color = 'RED'
        print_stdout('Failure!', color=color)

    sys.stdout.flush()
    print_stdout('RESULT: ', print_nl=False)
    print_stdout(res, color=color)
    sys.stdout.flush()

    return res

def check_components(opts, additional_bins = []):
    # check availability of binaries and libraries
    perform_binaries_check(additional_bins)
    perform_libraries_check()

    # this calls the tools, so it must be after setting the environ
    if not opts.no_integrity_check:
        from symbiotic.integritycheck import IntegrityChecker

        try:
            _, versions, _ = get_versions()
            checker = IntegrityChecker(versions)
            checker.check(opts.tool_name);
        except SymbioticException as e:
            err('{0}\nIf you are aware of this, you may use --no-integrity-check '\
                'to suppress this error'.format(str(e)))

def setup_symbiotic():
    environment = Environment(get_symbiotic_dir())
    dbg('Symbiotic dir: {0}'.format(environment.symbiotic_dir))

    opts, args = parse_command_line(environment)

    if opts.dump_env_only:
        tool = initialize_verifier(opts)
        environment.set(tool, opts)
        dump_paths(dump_env_cmd)

        sys.exit(0)

    if len(args) < 1:
        print(usage_msg)
        sys.exit(1)

    print_short_vers()
    sources = args
    tool = initialize_verifier(opts)

    # set environment. That is set PATH and LD_LIBRARY_PATH and so on
    environment.set(tool, opts)

    dump_paths(fun=dbg)
    check_components(opts, [opts.slicer_cmd[0]] + [tool.executable()])

    # get absolute paths to sources
    sources = opts.sources = list(map(os.path.abspath, sources))

    # change working directory so that we do not mess up the current directory much
    environment.working_dir = os.path.abspath(setup_working_directory(opts))
    os.chdir(environment.working_dir)
    dbg('Working directory: {0}'.format(environment.working_dir))
    assert environment.symbiotic_dir != environment.working_dir

    return tool, sources, opts, environment

def cleanup_symbiotic(opts, environment):
    os.chdir(environment.symbiotic_dir)
    assert environment.symbiotic_dir != environment.working_dir
    if not opts.save_files:
        rm_tmp_dir(environment.working_dir)

if __name__ == "__main__":
    # store time when we have started, so that we can
    # measure how long Symbiotic ran
    start_time = time()

    tool, sources, opts, environment = setup_symbiotic()

    if opts.timeout != 0:
        start_timeout(opts.timeout)
    symbiotic = None
    try:
        # let the show begin!
        try:
            symbiotic = Symbiotic(tool, sources, opts, environment)
            res = symbiotic.run()
        except SymbioticException as e:
            sys.stdout.flush()
            sys.stderr.flush()

            print_stdout('RESULT: ERROR ({0})'.format(str(e)))
            err(' == FAILURE ==\n{0}'.format(str(e)))

        report_results(res or "no result")
    except Timeout:
        sys.stdout.flush()
        sys.stderr.flush()

        print_stdout('RESULT: timeout')
    finally:
        stop_timeout()
        if symbiotic:
            symbiotic.terminate()
            symbiotic.kill()
            symbiotic.kill_wait()

    cleanup_symbiotic(opts, environment)

    # print information about how long Symbiotic ran
    print_stdout('INFO: Total time elapsed: {0}'.format(time() - start_time),
                 color='WHITE')
    sys.exit(0)
